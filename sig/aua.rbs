module Aua
  VERSION: String

  class Error < StandardError
  end

  type char = String

  class Logger
    LHS_WIDTH: Integer
    def initialize: (?String, ?untyped) -> void

    def info: (String) -> void
            | (String) { (untyped) -> String } -> void
    def warn: (String) -> void
    def error: (String) -> void
    def debug: (String) -> void
             | (String) { (untyped) -> String } -> void
    def trace: (String) -> void
    def fatal: (String) -> void
    def self.default: () -> Logger
    def self.level: () -> untyped
    def self.outlet: () -> untyped
    def self.logger=: (untyped) -> void
    def format_message: (untyped, untyped, untyped, untyped) -> untyped
  end

  def self.logger: () -> Logger
  def self.logger=: (Logger) -> void

  module Text
    CONTEXT_SIZE: Integer

    class Cursor
      attr_reader line: Integer
      attr_reader column: Integer

      def initialize: (Integer, Integer) -> void
      def advance: () -> void
      def newline: () -> void
    end

    class Document
      attr_reader text: String
      attr_reader cursor: Cursor
      attr_reader position: Integer

      def initialize: (String) -> void
      def advance: (?Integer) -> void
      def current: () -> char?
      def peek: () -> char?
      def peek_at: (Integer) -> char?
      def peek_n: (Integer) -> Array[char]
      def slice: (Integer, Integer) -> String?
      def indicate: () -> Array[String]
      def finished?: () -> bool
      def caret: () -> Cursor
      def content: () -> String
      def size: () -> Integer
    end

    def self.indicate: (String, Cursor) -> Array[String]
  end

  module Syntax
    class Token
      attr_reader type: Symbol
      attr_reader value: untyped
      attr_reader at: ::Aua::Text::Cursor
      def initialize: (type: Symbol, value: untyped, at: ::Aua::Text::Cursor) -> void
    end

    ONE_CHAR_TOKEN_NAMES: Hash[String, Symbol]
    TWO_CHAR_TOKEN_NAMES: Hash[String, Symbol]
    THREE_CHAR_TOKEN_NAMES: Hash[String, Symbol]

    KEYWORDS: Set[Symbol]
  end

  type token = Syntax::Token
  type matchy = Regexp | String
  type string_machine_mode = :start | :body | :end | :none
  type tkn = token | Array[token]

  class Lex
    class Handle
      class StringMachine
        @lexer: Lex

        attr_accessor mode: string_machine_mode
        attr_accessor buffer: String
        attr_accessor quote: String
        attr_accessor pending_tokens: Array[token]
        attr_accessor saw_interpolation: bool
        attr_accessor inside_string: bool
        attr_accessor max_len: Integer

        def initialize: (Lex) -> void
        def reset!: () -> void
        def lens: () -> Lex::Lens
        def advance: (?Integer) -> void
        def current_char: () -> char
        def next_char: () -> char
        def next_next_char: () -> char
        def eof?: () -> bool
        def current_pos: () -> Integer
        def t: (Symbol, ?untyped) -> Syntax::Token
        #  | (Symbol) -> Syntax::Token
        def flush: () -> String
        def append: (String) -> void
        def at_str_end?: (?quote: String) -> bool
        def perform!: () -> (:continue | Syntax::Token | Array[Syntax::Token])
        def perform: (string_machine_mode) -> (:continue | Syntax::Token | Array[Syntax::Token])

        def start: () -> void
        def body: () -> void
        def end: () -> void
        def none: () -> void
        def spin!: () { (untyped) -> untyped } -> untyped
        def spindown?: () -> bool
        def inside!: (?Symbol) -> void

        def body_transition: () -> void
        def body_transition_single_double_quote: () -> void
        def body_transition_triple_quote: () -> void
        def body_transition_escape: () -> void
        def body_transition_interpolation: () -> void
      end

      def initialize: (Lex) -> void

      def comment: (String) -> token?
      def plus: (String) -> token?
      def star: (String) -> token?
      def slash: (String) -> token?
      def pow: (String) -> token?
      def lparen: (String) -> token?
      def rparen: (String) -> token?
      def number: (String) -> token?
      def equals: (String) -> token?
      def identifier: (String) -> token?
      def string: (String) -> (token | Array[token])?
      def minus: (String) -> token?
      def whitespace: (String) -> void
      def unexpected: (String) -> void
      def prompt: (String) -> tkn
      def pipe: (String) -> token?
      def lbrace: (String) -> token?
      def rbrace: (String) -> token?
      def colon: (String) -> token?
      def comma: (String) -> token?
      def lbracket: (String) -> token?
      def rbracket: (String) -> token?
      def dot: (String) -> token
      def and: (String) -> token?
      def or: (String) -> token?
      def not: (String) -> token?
      def eq: (String) -> token?
      def lt: (String) -> token?
      def gt: (String) -> token?
      def lte: (String) -> token?
      def gte: (String) -> token?
      def tilde: (String) -> token?
      def neq: (String) -> token?
      def fat_arrow: (String) -> token?

      def interpolation_end: (String) -> token?
      def eos: (String) -> token?

      def string_machine: () -> StringMachine
      def interpolative_quote?: (String) -> bool

      def t: (Symbol, ?untyped) -> Syntax::Token

      def interpolative_string: (String) -> untyped

      private

      def and_char: (String) -> token
      def lens: () -> Lex::Lens
      def advance: (?Integer) -> void
      def recognize: () -> Lex::Recognizer
      def current_char: () -> char
      def next_char: () -> char
      def next_next_char: () -> char
      def current_pos: () -> Integer
      def eof?: () -> bool

      def self.unexpected_character_message: (Lex::Lens) -> String
    end

    class Recognizer
      KEYWORDS: Set[Symbol]
      MAX_STRING_LENGTH: Integer
      def initialize: (Lex) -> void
      def identifier: () -> token
      def number_lit: () -> token
      def string: (?String) -> token
      def string_with_interpolation: (?String) -> token
      def number_token_from_string: (String, bool) -> token
      def current_char: () -> char
      def advance: (?Integer) -> void
      def t: (Symbol, untyped, at: Text::Cursor) -> Syntax::Token
           | (Symbol, untyped) -> Syntax::Token
           | (Symbol) -> Syntax::Token
      def eof?: () -> bool
      def current_pos: () -> Integer
      def next_char: () -> char
      def next_next_char: () -> char

      private

      def consume_number: () -> [bool, Integer]
      def consume_string_chars: (String) -> String
      def encode_string: (String, quote: String) -> Syntax::Token
      def string_end?: (Array[String]) -> bool
      def invalid_token_message: (String) -> String
      def check_number_followed_by_identifier: () -> void
      def string_character_enumerator: (String) -> Enumerator[char]
    end

    class Lens
      def initialize: (Text::Document) -> void
      def current_pos: () -> Integer
      def current_line: () -> Integer
      def current_column: () -> Integer
      def current_char: () -> char
      def describe: () -> String
      def describe_character: (char) -> String
      def identify: (message: String, hint: String) -> String
      def eof?: () -> bool
      def peek: () -> char
      def peek_n: (Integer) -> Array[char]
      def more?: () -> bool
    end

    include Syntax

    @doc: Text::Document
    @lens: Lens
    @recognize: Recognizer
    @handle: Handle

    attr_reader lens: Lens

    def initialize: (String) -> void

    def tokens: () -> Enumerator[token]
    def advance: (?Integer) -> void
    def recognize: () -> Lex::Recognizer
    def caret: () -> Text::Cursor
    def slice_from: (Integer) -> String?
    def string_machine: () -> Handle::StringMachine
    def observe: (token) { (token) -> void } -> void
    def push_context: (Symbol) -> void
    def pop_context: () -> Symbol?
    def current_context: () -> Symbol?
    def in_interpolation?: () -> bool
    def accept!: (Array[String]) -> token?

    def t: (Symbol, ?untyped) -> Syntax::Token

    private

    def tokenize: () { (token) -> void } -> void
    def tokenize!: () { (token) -> void } -> void
    def accept: () -> untyped
    def accept_n: (Array[char]) -> untyped
    def accept_token: () -> token?
    def consume_until_acceptance: () -> token?
    def current_char: () -> char
    def current_column: () -> Integer
    def current_line: () -> Integer
    def current_pos: () -> Integer
    def each_token: () { (token) -> void } -> void
    def eof?: () -> bool
    def handle: () -> Lex::Handle
    def pattern_match?: (String | Regexp, String) -> bool
    def token_names: (Integer) -> untyped
    def unexpected_character_message: () -> String
    def yield_lexeme: () { (token) -> void } -> void

    def should_resume_string: () -> bool
    def handle_pending_tokens: () { (token) -> void } -> void

    def handle_string_mode: () { (token) -> void } -> void
    def handle_string_mode_token: (token) { (token) -> void } -> void
    def handle_normal_mode: () { (token) -> void } -> void
    def handle_normal_mode_token: (token) { (token) -> void } -> void
    def check_string_bounds: (token) -> void
  end

  module AST
    class Node
      attr_reader type: Symbol
      attr_reader value: untyped
      attr_reader at: ::Aua::Text::Cursor
      def initialize: (type: Symbol, value: untyped, at: ::Aua::Text::Cursor) -> void
    end
  end

  module Grammar
    PRIMARY_NAMES: Hash[Symbol, Symbol]
    BINARY_PRECEDENCE: Hash[Symbol, Integer]

    attr_reader parse: Parse
    def s: (Symbol, *untyped) -> AST::Node
    def normalize_maybe_list: (untyped) -> untyped
    class Primitives
      include Grammar
      def initialize: (Parse) -> void
      def parse_negation: () -> AST::Node
      def parse_id: () -> AST::Node
      def parse_int: () -> AST::Node
      def parse_nihil: () -> AST::Node
      def parse_float: () -> AST::Node
      def parse_bool: () -> AST::Node
      def parse_str: () -> AST::Node
      def parse_str_start: () -> nil
      def parse_str_part: () -> nil
      def parse_str_end: () -> AST::Node
      def parse_simple_str: () -> AST::Node
      def parse_parens: () -> AST::Node
      def parse_generative_lit: () -> AST::Node
      def parse_object_literal: () -> AST::Node
      def parse_array_literal: () -> AST::Node

      private

      def parse_one: (Symbol) -> AST::Node
      def parse_empty_object: () -> AST::Node
      def skip_whitespace: () -> void
      def parse_object_field: () -> AST::Node
      def continue_object_parsing?: () -> bool
      def parse_empty_array: () -> AST::Node
      def continue_array_parsing?: () -> bool
    end
  end
  def self.s: (Symbol, *untyped) -> AST::Node

  class Parse
    module Enumerators
      class StructuredString
        include Grammar
        attr_reader parser: Parse
        def initialize: (Parse) -> void

        def str_part: (untyped yielder) -> void
        def interpolation_start: (untyped yielder) -> void
        def gen_end: (untyped yielder) -> void
        def str_end: (untyped yielder) -> void
      end

      def self.structured_string: (Parse) -> Enumerator[AST::Node]
    end

    include Grammar

    @tokens: Enumerator[token]
    @buffer: Array[token?]
    @context: Runtime::Context

    attr_reader current_token: token
    attr_accessor current_string_quote: String?
    attr_reader context: Runtime::Context

    def initialize: (Enumerator[token], ?Runtime::Context?) -> void
    def parse_failure: (String, ?at: Text::Cursor?) -> void
    def tree: () -> AST::Node
    def consume: (Symbol) -> void
               | (Symbol, untyped?) -> void
    def next_token: () -> token?
    def peek_token: () -> token?
    def parse: () -> AST::Node
    def parse_expression: () -> AST::Node
    def parse_assignment: () -> AST::Node?
    def parse_binop: (?Integer) -> AST::Node
    def parse_primary: () -> AST::Node
    def parse_command: () -> AST::Node?
    def parse_unary: () -> AST::Node?
    def parse_conditional: () -> AST::Node?
    def parse_condition_body: () -> [AST::Node, AST::Node?]
    def parse_elif_chain: () -> AST::Node
    def parse_structured_str: () -> AST::Node
    def parse_statements: () -> AST::Node
    def parse_typedef: () -> AST::Node
    def parse_type_expr: () -> AST::Node
    def parse_type_atom: () -> AST::Node
    def parse_type_declaration: () -> AST::Node?
    def parse_type_expression: () -> AST::Node
    def parse_union_type: (AST::Node) -> AST::Node
    def parse_record_type: () -> AST::Node
    def unexpected_tokens?: () -> bool
    def unexpected_token: () -> untyped
    def self.ast: (Array[token]) -> AST::Node
    def binary_op?: (Symbol) -> bool
    def advance: () -> void

    def statement_enumerator: () -> Enumerator[AST::Node]
    def primitives: () -> Grammar::Primitives
    def structured_string_enumerator: () -> Enumerator[AST::Node]

    def precedent?: (Symbol, Integer) -> bool
    def consume_binary_op: (AST::Node) -> AST::Node
    def parse_call: () -> AST::Node?
    def command_argument_enumerator: () -> Enumerator[AST::Node]
    def should_end_command_args?: (token) -> bool

    def info: (String) -> void

    private

    def parse_string_literal_type: () -> AST::Node
    def parse_quoted_string_literal_type: () -> AST::Node
    def parse_type_reference: () -> AST::Node
    def parse_empty_record: () -> AST::Node
    def parse_record_field: () -> AST::Node
    def continue_record_parsing?: () -> bool
    def parse_union_type_member: () -> AST::Node
    def parse_union_string_constant: () -> AST::Node
    def parse_union_string_part: () -> AST::Node
    def parse_union_type_reference: () -> AST::Node
    def parse_function_definition: () -> AST::Node
    def parse_while: () -> AST::Node
    def parse_parenthesized_type_expression: () -> AST::Node
    def parse_function_argument: () -> AST::Node
    def parse_function_call: () -> AST::Node
    def parse_lambda_parameters: () -> Array[String]
  end

  module Registry
    class Store[T]
      @store: Hash[String, Hash[Symbol, T]]

      def initialize: () -> void
      def []: (String) -> Hash[Symbol, T]
    end
  end

  type aura_meth = ^(*untyped) [self: self] -> Aua::Obj
  Methods: Registry::Store[aura_meth]

  class Base
    def initialize: () -> void
    def self.aura_methods: () -> Hash[Symbol, aura_meth]
    def self.aura_method: (Symbol) -> aura_meth
    def self.define_aura_method: (Symbol) { (*untyped) [self: self] -> Aua::Obj } -> void
    def aura_methods: () -> Hash[Symbol, aura_meth]
    def aura_send: (Symbol, *untyped) -> untyped
    def aura_respond_to?: (Symbol) -> bool
  end

  class Obj < Base
    @method_store: Hash[Symbol, aura_meth]

    def klass: () -> Klass
    def introspect: () -> String
    def pretty: () -> String
    def aura_methods: () -> Hash[Symbol, aura_meth]
    def self.aura_methods: () -> Hash[Symbol, aura_meth]
    def self.aura_method: (Symbol) -> aura_meth
    def self.define_aura_method: (Symbol) { (*untyped) [self: self] -> Aua::Obj } -> void

    def aura_respond_to?: (Symbol) -> bool
    def aura_send: (Symbol, *untyped) -> untyped
    def json_schema: () -> untyped
    def self.klass: () -> Klass

    def self.describe: (String) -> untyped
  end

  class Klass < Obj
    def initialize: (String, Obj?) -> void
    def klass: () -> Klass
    def introspect: () -> String
    def self.klass: () -> Klass
    def self.obj: () -> Klass
    def json_schema: () -> untyped
    def construct: (untyped) -> Obj?
    def has_type?: (String) -> bool
    def lookup: (String) -> untyped
    def wrap_value: (untyped) -> Obj
    def name: () -> String
    def type_annotation: () -> String
    def type_arg_to_json_type: (untyped) -> String
    def type_arg_to_string: (untyped) -> String
    def union_values: () -> Array[untyped]
    def schema_classes: () -> Array[untyped]
    def construct_list: (Array[untyped]) -> Aua::List
    def validate_primitive_type!: (untyped) -> void
  end

  class Nihil < Obj
    def klass: () -> Klass
    def name: () -> String
    def value: () -> nil
    def introspect: () -> String
    def json_schema: () -> untyped
    def self.klass: () -> Klass
    def self.json_schema: () -> untyped
  end

  class Int < Obj
    def initialize: (Integer) -> void
    def klass: () -> Klass
    def name: () -> String
    def introspect: () -> String
    attr_reader value: Integer
    def json_schema: () -> untyped
    def self.klass: () -> Klass
    def self.json_schema: () -> untyped
  end

  class Float < Obj
    def initialize: (::Float) -> void
    def klass: () -> Klass
    def name: () -> String
    def introspect: () -> String
    attr_reader value: ::Float
    def json_schema: () -> untyped
    def self.klass: () -> Klass
    def self.json_schema: () -> untyped
  end

  class Str < Obj
    def initialize: (String) -> void
    def klass: () -> Klass
    def name: () -> String
    def introspect: () -> String
    attr_reader value: String
    def json_schema: () -> untyped
    def self.klass: () -> Klass
    def self.json_schema: () -> untyped
  end

  class Bool < Obj
    def initialize: (bool) -> void
    def klass: () -> Klass
    def name: () -> String
    def introspect: () -> String
    attr_reader value: bool
    def json_schema: () -> untyped
    def self.klass: () -> Klass
    def self.json_schema: () -> untyped
    def self.introspect: () -> String
  end

  class Time < Obj
    def initialize: (::Time) -> void
    def klass: () -> Klass
    def name: () -> String
    def introspect: () -> String
    def self.now: () -> Time

    attr_reader value: ::Time
    def json_schema: () -> untyped
    def self.klass: () -> Klass
    def self.json_schema: () -> untyped
  end

  class List < Obj
    attr_reader values: Array[Obj]
    def initialize: (Array[Obj]) -> void
    def klass: () -> Klass
    def name: () -> String
    def introspect: () -> String
    def type_name: () -> String
    def self.klass: () -> Klass
    def self.json_schema: () -> untyped
  end

  class Dict < Obj
    attr_reader values: Hash[String, Obj]
    def initialize: (?Hash[String, Obj], ?String) -> void
    def klass: () -> Klass
    def name: () -> String
    def introspect: () -> String
    def type_name: () -> String
    def get_field: (String) -> Obj
    def has_field?: (String) -> bool
    def set_field: (String, Obj) -> void
    def self.klass: () -> Klass
    def self.json_schema: () -> untyped
  end

  type fields = Array[Hash[Symbol, untyped]]

  class RecordObject < Obj
    attr_reader type_name: String
    attr_reader field_definitions: fields
    attr_reader values: Hash[String, Obj]
    def initialize: (String, fields, Hash[String, Obj]) -> void
    def get_field: (String) -> Obj
    def set_field: (String, Obj) -> void
    def introspect: () -> String
    def name: () -> String
  end

  class ObjectLiteral < Obj
    attr_reader values: Hash[String, Obj]
    def initialize: (Hash[String, Obj]) -> void
    def get_field: (String) -> Obj
    def has_field?: (String) -> bool
    def set_field: (String, Obj) -> void
    def introspect: () -> String
    def name: () -> String
  end

  class Function < Obj
    attr_reader name: String
    attr_reader parameters: Array[String]
    attr_reader body: untyped
    attr_reader closure_env: Hash[String, untyped]
    def initialize: (name: String, parameters: Array[String], body: untyped, closure_env: Hash[String, untyped]) -> void
    def klass: () -> Klass
    def introspect: () -> String
    def pretty: () -> String
    def callable_with?: (Integer) -> bool
    def call: (untyped, Array[untyped]) -> untyped
    def enclose: (Hash[String, untyped]) -> void
    def json_schema: () -> Hash[untyped, untyped]
    def to_callable: () -> Hash[Symbol, untyped]
    def self.klass: () -> Klass
    def self.json_schema: () -> Hash[untyped, untyped]
  end


  module Runtime
    module IR
      module Types
        class UnionType
          attr_reader types: Array[untyped]
          def initialize: (Array[untyped]) -> void
          def inspect: () -> String
        end

        class TypeReference
          attr_reader name: String
          def initialize: (String) -> void
          def inspect: () -> String
        end

        class TypeConstant
          attr_reader name: String
          def initialize: (String) -> void
          def inspect: () -> String
        end

        class GenericType
          attr_reader base_type: untyped
          attr_reader type_params: Array[untyped]
          def initialize: (untyped, Array[untyped]) -> void
          def inspect: () -> String
        end

        class RecordType
          attr_reader fields: Array[untyped]
          def initialize: (Array[untyped]) -> void
          def inspect: () -> String
        end
      end
    end

    class Statement
      attr_reader type: Symbol
      attr_reader value: untyped
      def initialize: (type: Symbol, value: untyped) -> void
    end

    module Semantics
      MEMO: String
      def self.inst: (Symbol, *untyped) -> Statement
    end

    class Context
      def initialize: (String) -> void
      def source_document: () -> Text::Document
    end

    class TypeRegistry
      attr_reader types: Hash[String, untyped]
      def initialize: () -> void
      def register: (String, untyped) -> void
      def register_type: (String, untyped) -> void
      def type?: (String) -> bool
      def lookup: (String) -> untyped
      def wrap_value: (untyped) -> Obj
      def type_names: () -> Array[String]
      def create_type_object: (String, untyped) -> untyped
      def create_union_type: (String, untyped) -> Runtime::Union
      def create_constant_type: (String, untyped) -> Runtime::Constant
      def create_reference_type: (String, untyped) -> Runtime::Reference
      def create_record_type: (String, untyped) -> Runtime::RecordType
      def extract_field_definitions: (Array[untyped]) -> Array[Hash[Symbol, untyped]]
      def create_generic_type: (String, Array[untyped]) -> Runtime::GenericType
    end

    module JsonSchema
      def self.for_record_type: (fields, TypeRegistry) -> Hash[untyped, untyped]
      def self.for_union_type: (Array[untyped], TypeRegistry) -> Hash[untyped, untyped]

      def self.schema_for_type: (untyped, TypeRegistry) -> Hash[untyped, untyped]
      def self.schema_for_type_reference: (String, TypeRegistry) -> Hash[untyped, untyped]
      def self.extract_inner_schema: (Hash[untyped, untyped]) -> Hash[untyped, untyped]
    end

    class RecordType < Klass
      attr_reader field_definitions: fields
      attr_reader type_registry: TypeRegistry

      def initialize: (String, fields, TypeRegistry) -> void
      def json_schema: () -> Hash[untyped, untyped]
      def construct: (Hash[String, untyped]) -> Aua::RecordObject

      private

      def wrap_field_value: (String, untyped) -> Obj
    end

    class Union < Klass
      attr_reader variants: Array[untyped]
      attr_reader type_registry: TypeRegistry

      def initialize: (String, Array[untyped], TypeRegistry) -> void
      def json_schema: () -> Hash[untyped, untyped]
      def construct: (untyped) -> Aua::Str
      def union_values: () -> Array[untyped]

      private

      def extract_union_values: (Array[untyped]) -> Array[untyped]
    end

    class Constant < Klass
      attr_reader constant_value: untyped

      def initialize: (String, untyped) -> void
      def json_schema: () -> Hash[untyped, untyped]
      def construct: (untyped) -> Aua::Str
    end

    class Reference < Klass
      attr_reader referenced_type: String

      def initialize: (String, String) -> void
      def json_schema: () -> Hash[untyped, untyped]
      def construct: (untyped) -> Aua::Str
    end

    class GenericType < Klass
      attr_reader base_type: untyped
      attr_reader type_args: Array[untyped]
      attr_reader type_registry: TypeRegistry

      def initialize: (String, Array[untyped], TypeRegistry) -> void
      def json_schema: () -> Hash[untyped, untyped]
      def type_arg_to_json_type: (untyped) -> String
      def type_arg_to_string: (untyped) -> String
    end

    class TypeConverter
      def self.convert_type_to_annotation_string: (untyped) -> String
      def self.describe_type_ast: (untyped) -> String
      def self.ast_to_ir: (untyped) -> untyped
      def self.ir_to_runtime: (untyped, TypeRegistry) -> untyped
      def self.ast_to_runtime: (untyped, TypeRegistry) -> untyped
      def self.ir_to_annotation_string: (untyped) -> String
    end

    class UnionType < Klass
      attr_reader types: Array[untyped]
      def initialize: (String, Array[untyped]) -> void
    end

    class TypeConstant < Klass
      def initialize: (String, String) -> void
    end

    type primary = Int | Float | Str | Bool | Nihil
    type environment = Hash[String, untyped]

    type statement = Array[Statement] | Statement | Array[primary] | primary

    class VM
      class CallFrame
        def initialize: (String, untyped parameters, untyped evaluated_args, untyped closure_env) -> void
        def local_env: () -> environment
      end
      module Types
        class UnionType
          def initialize: (Array[untyped]) -> void
        end

        class TypeReference
          def initialize: (String) -> void
        end

        class TypeConstant
          def initialize: (String) -> void
        end
      end

      module Builtin
        def self.builtin_cast: (Aua::Obj, Klass) -> Aua::Obj?
        def self.schema_for: (Klass) -> untyped
        def self.build_cast_prompt: (Aua::Obj, Klass) -> String
        def self.builtin_inspect: (Aua::Obj) -> Aua::Str
        def self.builtin_rand: (Aua::Int) -> Aua::Int
        def self.builtin_time: (Aua::Str) -> Aua::Time
        def self.builtin_say: (Aua::Str) -> Aua::Nihil
        def self.builtin_ask: (Aua::Str) -> Aua::Str
        def self.builtin_chat: (Aua::Str) -> Aua::Str
        def self.builtin_see_url: (Aua::Str) -> Aua::Str
        def self.handle_see_url_response: (URI, Net::HTTPResponse) -> Aua::Str
        def self.builtin_typeof: (Aua::Obj) -> Aua::Str
      end
      module Commands
        LET: untyped
        RECALL: untyped
        LOCAL_VARIABLE_GET: untyped
        SEND: untyped
        CONCATENATE: untyped
        GEN: untyped
        CAST: untyped
        CONS: untyped
        LOOKUP_TYPE: untyped
        LAMBDA: untyped
      end

      class Translator
        module Binop
          include Commands
          def self.binary_operation: (Symbol, statement, statement) -> statement
          def self.binop_plus: (statement, statement) -> statement
          def self.binop_minus: (statement, statement) -> statement
          def self.binop_slash: (statement, statement) -> statement
          def self.float_slash: (statement, statement) -> statement
          def self.int_slash: (Int, Int) -> statement
          def self.int_plus: (Int, Int) -> statement
          def self.float_plus: (Float, Float) -> statement
          def self.str_plus: (Str, Str) -> statement
          def self.raise_binop_type_error: (Symbol, statement, statement) -> statement
          def self.binop_star: (statement, statement) -> statement
          def self.binop_pow: (statement, statement) -> statement
          def self.binop_equals: (statement, statement) -> statement
          def self.binop_dot: (statement, String) -> statement
          def self.access_field: (statement, String) -> statement
          def self.handle_type_cast: (statement, statement) -> statement
          def self.resolve_cast_target: (statement) -> (statement | Klass)
          def self.binop_not_equals: (statement, statement) -> statement
          def self.handle_type_annotation: (statement, statement) -> statement
          def self.handle_enum_selection: (statement, statement) -> statement
          def self.handle_lambda: (statement, statement) -> statement
          def self.extract_choices_from_union_type: (untyped) -> Array[untyped]
          def self.extract_union_choices: (untyped) -> Array[untyped]
        end

        TRANSLATIONS: Hash[Symbol, Array[Statement]]

        @vm: VM

        include Commands

        def initialize: (VM) -> void
        def environment: () -> environment
        def reify_primary: (AST::Node) -> primary
        def translate_negation: (AST::Node) -> Array[Statement]
        def translate: (AST::Node) -> statement
        def translate_assignment: (AST::Node) -> Array[Statement]
        def translate_basic: (AST::Node) -> statement
        def translate_binop: (AST::Node) -> statement
        def translate_if: (AST::Node) -> statement
        def translate_not: (AST::Node) -> statement
        def translate_gen_lit: (untyped) -> Array[Aua::Str]
        def translate_call: (AST::Node) -> Array[Statement]
        def translate_sequence: (AST::Node) -> Array[Statement]
        def translate_structured_str: (AST::Node) -> statement
        def translate_structured_str_part: (untyped) -> untyped
        def translate_type_declaration: (AST::Node) -> Array[Statement]
        def translate_object_literal: (AST::Node) -> Array[Statement]
        def translate_array_literal: (AST::Node) -> Array[Statement]
        def translate_function_definition: (AST::Node) -> Array[Statement]
        def translate_union_type: (AST::Node) -> Array[Statement]
        def translate_type_reference: (AST::Node) -> Array[Statement]
        def translate_type_constant: (AST::Node) -> Array[Statement]
        def translate_generic_type: (AST::Node) -> Array[Statement]
        def translate_tuple: (AST::Node) -> Array[Statement]
        def translate_type_annotation: (AST::Node) -> Array[Statement]
        def translate_while: (AST::Node) -> Array[Statement]
      end

      extend Semantics
      include Builtin
      @env: environment
      @tx: Translator
      @builtins: Hash[Symbol, untyped]
      def initialize: (?environment) -> void
      def builtins: () -> Hash[Symbol, untyped]
      def evaluate: (Runtime::Context, AST::Node) -> Aua::Obj

      private

      def evaluate!: (AST::Node) -> Aua::Obj
      def evaluate_one: (Statement) -> Aua::Obj
      def evaluate_one!: (Statement) -> Aua::Obj
      def evaluate_simple: (Statement) -> Aua::Obj

      def eval_call: (String | Symbol, Array[untyped]) -> untyped
      def eval_cat: (Array[untyped]) -> untyped
      def eval_cons: (Array[untyped]) -> Aua::List
      def eval_gen: (Array[untyped]) -> untyped
      def eval_id: (untyped) -> untyped
      def eval_if: (untyped, untyped, untyped?) -> untyped
      def eval_let: (String, Aua::Obj) -> Aua::Obj
      def eval_member_access: (Array[untyped], String) -> untyped
      def eval_member_assignment: (Array[untyped], String, untyped) -> untyped
      def eval_object_literal: (Array[untyped]) -> Aua::ObjectLiteral
      def eval_send: (String | Symbol receiver, Symbol method, *untyped args) -> untyped
      def eval_type_declaration: (String, untyped) -> untyped
      def eval_type_lookup: (String) -> untyped
      def eval_user_function: (String, Array[untyped]) -> untyped
      def eval_generic_type_lookup: (untyped) -> untyped
      def eval_function_definition: (String, Array[untyped], untyped) -> untyped
      def eval_defun: (String, Array[untyped], untyped) -> untyped
      def eval_union_type_lookup: (untyped) -> untyped
      def eval_dynamic_union_class: (untyped) -> untyped
      def eval_llm_select: (untyped) -> untyped
      def eval_collapse: (untyped) -> untyped
      def eval_typed_value: (untyped) -> untyped
      def eval_while: (untyped, untyped) -> untyped
      def extract_union_choices_from_type: (untyped) -> Array[untyped]
      def eval_branch: (untyped) -> untyped
      def extract_parameter_name: (untyped) -> String
      def eval_function_object: (Function, Array[untyped]) -> untyped
      def compatible_types?: (untyped, untyped) -> bool
      def type_name: (untyped) -> String
      def get_field_type_from_struct: (String, String) -> untyped
      def convert_type_to_annotation_string: (untyped) -> String
      def describe_type_ast: (untyped) -> String

      def interpolated: (Aua::Obj) -> Aua::Obj
      def reduce: (AST::Node) -> statement
      def resolve: (Aua::Obj) -> Aua::Obj
      def schema_for: (Klass) -> untyped
      def build_cast_prompt: (Aua::Obj, Klass) -> String
      def to_ruby_str: (untyped) -> String

      def builtin_cast: (Aua::Obj, Klass) -> Aua::Obj?
      def builtin_inspect: (Aua::Obj) -> Aua::Str
      def builtin_rand: (Aua::Obj) -> Aua::Int
      def builtin_time: (Aua::Str) -> Aua::Time
      def builtin_say: (Aua::Str) -> Aua::Nihil
      def builtin_ask: (Aua::Str) -> Aua::Str
      def builtin_chat: (Aua::Str) -> Aua::Str
      def builtin_see_url: (Aua::Str) -> Aua::Str

      def handle_see_url_response: (URI, Net::HTTPResponse) -> Aua::Str
    end

    class PrettyPrinter
      def pretty: (Obj) -> String
    end

    class Interpreter
      def initialize: (?environment) -> void
      def lex: (Context, String) -> Enumerator[token]
      def parse: (Context, Enumerator[token]) -> AST::Node
      def run: (Context, String) -> untyped
      def self.prelude_env: () -> environment

      private

      def vm: () -> VM
    end

    class Configuration
      attr_reader base_uri: String
      attr_reader model: String
      attr_reader testing: bool
      attr_reader temperature: ::Float
      attr_reader max_tokens: Integer
      attr_reader top_p: ::Float
      attr_reader frequency_penalty: ::Float
      attr_reader presence_penalty: ::Float
      def initialize: (
        ?base_uri: String, ?model: String, ?testing: bool, ?temperature: ::Float,
        ?max_tokens: Integer, ?top_p: ::Float, ?frequency_penalty: ::Float,
        ?presence_penalty: ::Float
      ) -> void
      def self.default: () -> Configuration
    end
  end

  module LLM
    class Provider
      class Error < Aua::Error
      end

      class Cache[ T = untyped]
        @cache: Hash[String, T]
        @cache_miss_lambda: ^(String, T) -> void
        def fetch: (String) { () -> T } -> T

        def append_to_cache_file: (String, T) -> void
        def dump: (String) -> void
        def fetch!: (String) { () -> T } -> T
        def hydrate: (String) -> void
        def hydrate_line: (String) -> void
        def miss: () { (String, T) -> void } -> void
        def self.instance: () -> Cache[untyped]
        def self.file_path: () -> String
        def self.simple_key: (untyped) -> String
        def with_cache: (String) { () -> T } -> T
      end

      class Response
        class Metadata
          attr_reader model: String
          attr_reader requested_at: ::Time
          attr_reader responded_at: ::Time
          attr_reader duration: ::Float
          attr_reader tokens_used: Integer?
          attr_reader parameters: Hash[untyped, untyped]
          def initialize: (
            model: String, requested_at: ::Time, responded_at: ::Time,
            ?tokens_used: Integer, ?parameters: Hash[untyped, untyped]
          ) -> void
          def timing: () -> String
          def self.coerce_timestamp: (untyped) -> ::Time
        end
        attr_reader prompt: String
        attr_reader message: String
        def initialize: (prompt: String, message: String, metadata: Metadata) -> void
        def to_s: () -> String
      end

      type completion_trace = {
          message: String,
          model: String,
          prompt: String,
          tokens_used: Integer?,
          parameters: Hash[untyped, untyped],
          requested_at: ::Time,
          responded_at: ::Time
        }

      class Completion
        attr_reader model: String
        attr_reader prompt: String
        attr_reader generation: Hash[Symbol, untyped]

        def initialize: (prompt: String, ?model: String, ?generation: Hash[Symbol, untyped], ?base_uri: String) -> void

        def generate: () -> completion_trace
        def call: () -> completion_trace
        def request: (prompt: String, ?model: String, ?generation: Hash[Symbol, untyped]) -> completion_trace
        def read_response: (String, prompt: String, meta: Hash[Symbol, untyped]) -> completion_trace

        def post: (untyped, untyped) -> untyped
        def db: () -> Cache[completion_trace]
        def request_body: (String, model: String, generation: Hash[Symbol, untyped]) -> untyped
        def self.default_generation_parameters: () -> Hash[Symbol, untyped]
      end

      def initialize: () -> void
      def chat_completion: (prompt: String, ?model: String, ?generation: Hash[Symbol, untyped]) -> Response
      def generation_parameters: () -> Hash[Symbol, untyped]
      def self.default_generation_parameters: () -> Hash[Symbol, untyped]
    end

    class Chat
      def initialize: () -> void
      def ask: (String) -> String
      def with_json_guidance: (untyped) { () -> untyped } -> untyped
    end

    def self.chat: () -> Chat
  end

  def self.testing: () -> bool
  def self.testing=: (bool) -> void
  def self.configure: () { (untyped) -> void } -> void
  def self.configuration: () -> Runtime::Configuration

  # Constants and helpers
  EOS: token
  NOTHING: AST::Node

  def self.run: (String) -> untyped
  def self.vm: (?Runtime::environment) -> Runtime::VM
  def self.testing?: () -> bool
  def self.builtins: () -> Hash[Symbol, untyped]
  def self.interpreter: () -> Runtime::Interpreter
end
