#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "aua"
require "flav/runner"
require 'rouge'

# CLI interface
if ARGV.empty? || ARGV.first == "list"
  runner = Flav::Runner.new
  runner.list_tasks
elsif ARGV.first == "help"
  using Rainbow
  app_name = "flav"
  emoji = "🕶️"
  # yaml_code = File.read('Flavfile.example.yaml')
  example_yaml = <<~YAML
    group_name:
      - task: simple_task                # Run group_name/simple_task.aura
        wants: [dep1, dep2]              # Dependencies
        description: "What this task does"
        prefilter:                       # Optional filters
          - confirm_inputs
        postfilter:
          - check_output
        repeat: 3                        # Repeat the task 3 times
        if: "condition"                  # Run only if condition is true
        unless: "condition"              # Skip if condition is true


    YAML
  formatter = Rouge::Formatters::Terminal256.new
  lexer = Rouge::Lexers::YAML.new
  puts <<~HELP
    #{emoji} #{app_name.blue}
    Aura-native task runner

    Usage:
      #{app_name} [task_name]    # Run a specific task
      #{app_name} list           # List all available tasks
      #{app_name} help           # Show this help

    #{"Task file format (YAML)".blue}
    A Flavfile specifies tasks in a YAML format.

    Here's an example:
    #{formatter.format(lexer.lex(example_yaml))}

  HELP
else
  task_name = ARGV.first
  opts = ARGV[1..-1].each_with_object({}) do |arg, hash|
    if arg.start_with?("--")
      key, value = arg[2..].split("=", 2)
      hash[key] = value || true
    end
  end
  puts "Running task: #{task_name} with options: #{opts.inspect}"
  runner = Flav::Runner.new
  runner.run_task(task_name, opts)
end
